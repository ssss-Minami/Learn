1.PY中除法取整为//，取余为%，与C不同；
   幂次为**
2.列表用[a:b]修改时可改变列表长度
3.函数导入：from 文件名（.py）import 函数名
4.函数形参可选默认参数，但定义函数时需必选参数在前，默认参数在后
5.函数形参中*不是指针，而是不定长参数；**为关键字参数。关键字参数在函数调用时需指明  关键字参数，如
    def func(**kw):
        print(kw)
    func(other = noob)
6.当元组tuple只包含一个元素时，需要在元素后加逗号，否则括号会被当作运算符
7.列表和元组可通过方法.list或.tuple相互转化
8.元组的优势：
    1）可以使函数返回多个值
    2） 可以使程序运行性能提升
    3） 一般来说，创建元组类型tuple的变量比列表类型list要快，而且占用更小的存储空间。
    4）使用元组是线程安全的
    5） 元组类型变量的元素不可更改性，可保证多线程读写时的安全问题。
9.discard() 和 remove() 方法删除集合中特定的元素。若删除的对象不存在，remove（）方法   会引起错误，discard（）方法不会。
10.python中可迭代指一个对象能够实现返回一个可迭代对象（可以是它自己）和迭代器中的    下一项

11.定义一个二维数组：inst = [[0] * 4] * 6

/**********************************************************************************/
1.类的实例的属性在修改后与类的属性独立，修改后实例的属性不再受类的属性的修改的影响

2.对类A的属性的操作为A.而非A().

3.类的属性分为公有（无特别声明时默认）、私有（双下划线__开始）、内置（系统默认添加   ，前后均双下划线）

4.类的方法：公有（实例可用）、私有、类（类和实例）、静态（定义时不用加self，类和实例，比类方法快但占资源）

5.类的默认的前后均带双下划线的方法均会自动调用，初始化时调用__init__,  删除或程序结束时调用__del__

6.在声明类的实例时，需  instance = class()   而非  instance = class
     用户在自定义类时相当于定义一个在内置builtins模块中的type类的一个子类，继承了type     类所有的方法，如__init__()
 
7.with  表达式  as  变量  中，若表达式为class()，此类会自动执行__enter__()和__exit__()，而   通常情况下定义和使用的类似乎不会执行
   另外，此类需自定义__exit__()和__enter__()，否则报错

8.hasattr(obj, attr)检查obj是否有叫做attr的属性，返回布尔值，注意attr为字符串，要““

9.
/************************************************************************************/

1.for else循环：若在for循环中没有执行到break语句，则循环结束后执行else语句   

2.print([i for i in range(4)])   结果[0, 1, 2, 3]
   print([['num' for i in range(4)]for j in range(3)])  二维列表

2.and \or运算重要的法则：短路法则，若a and b中a非0则返回b，否则返回0；若a or b中a为TRUE, 则返回a，否则返回b
    如：3 and 2  =  2,    0 and 2 = 0
           3 or 2 = 3,    0 or 2 = 2

3.部分数值处理见 .io

4.random模块： random.random()，需要先import

5.保留小数：round(num), 如a = round(a, 3)保留三位小数，四舍五入

6.any()、all()的区别：any(判断是否非空)数列有非空则true，all（判断是否完整）有空就false

/**************************************************************************************/
1.转义字符 \ 后紧接的字符按原意输出，除了\n换行，\r 回车  \xyy 执行十六进制数yy的字符       \b 退格   \在行尾时为续行

2.raw字符串中所有字符按本意解释，没有转义字符，格式为   r'字符串'
    
3.对字符串格式化：format()  （字符串内置方法，用 .引用）
   如：print("a={}, b={}".format(2, 3))     结果：a=2,b=3
          print("a={num1:.2f}, b={num2]".format(num2=3, num1=2.431532))       结          果:a=2.43,b=3

4.字典格式化  print("%(n1)s is a dump %(n2)s" %{"n1": 'name', "n2": 'ass'})      注意%()后加s                 结果：name is a dump ass

5.对字符串的方法不能修改字符串的定义，仅能在当前语句‘修改’，除非用=重新赋值定义



/***************************************************************************************/
1.windows中地址用\，其他系统和web用/
   Python中'D:\\'中\\是为了转义，转移后实则为 \，不可用r''代替实现

2.创建文件 open('文件地址', mode='w')

3.windows 不提供os.mknod()功能

4.打开文件要选择解码方式，如utf-8   open('file address', encoding='utf-8')

5.默认open(mode='r')时仅可读，mode='w'时仅可写，mode='a'时为追加
                        
                       ￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥
                       ***                                                                                 ***
                       ***    6.write()函数在'w'时实为“覆盖”，注意先存档    ***
                       ***                                                                                 ***
                       ￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥


/****************************************************************************************/
1.若要读取系统时间， from datetime（模块） import datetime（类），from不可省

2.延时：time模块中的sleep()，单位为秒，不太准确

3.计算周几：datetime.isoweekday(日期)